// UptimeRobot API Proxy Worker
// This worker acts as a CORS proxy between your widget and the UptimeRobot API

// Your UptimeRobot Read-only API key
const API_KEY = 'ur2875017-118b6389ec2262a9135b7929';

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
  // Allow CORS preflight requests
  if (request.method === 'OPTIONS') {
    return handleOptions(request)
  }
  
  // Make the actual API request
  try {
    // Create request to UptimeRobot API
    const apiUrl = 'https://api.uptimerobot.com/v2/getMonitors';
    
    // Create a new request with the necessary parameters
    const apiRequest = new Request(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cache-Control': 'no-cache'
      },
      body: `api_key=${API_KEY}&format=json&all_time_uptime_ratio=1`
    });
    
    // Fetch from UptimeRobot API
    const response = await fetch(apiRequest);
    const data = await response.json();
    
    // Return the data with CORS headers
    return new Response(JSON.stringify(data), {
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      }
    });
  } catch (error) {
    // Handle errors
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    });
  }
}

// Handle CORS preflight requests
function handleOptions(request) {
  return new Response(null, {
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    }
  });
}
